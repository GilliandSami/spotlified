{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;ACKA;;;;AAIA;;;;;;AAUA;;;;;;;;;;AAaA;;;;;;AAMA;;;;;;AAQA;;;;;;AAMA;;;;;;;AAOA;;;;;;;;;;;;;;;AAmBA;;;;;AAKA;;;;;AAOA;;;;;;;;;;AAeA;;;;;;AAWA;;;;;;;AASA;;;;AAIA;;;;;;;AAWA;;;;;;;AAQA;;;;;AAMA;;;;;;;;;;;AAwBA;;;;AAKA;;;;AAMA;;;;AAKA;EACE;;;;EAIA;;;;;ACtMF;;;;;;AAMA;;;;AAIA;;;;;;AAOA;EACE;;;;;AAKF;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAKA;;;;ACzCA;;;;;;;;;AASA;;;;;AAKA;;;;AAKA;;;;ACpBA;;;;;AAKA;;;;;;;;;;AAWA;;;;AAIA;;;;AAOA;;;;;;;AAWA;;;;AAQA;;;;;;;AAQA;;;;;;;;;;;;;;;AAsCA;;;;AAKA;EACE;;;;;AAMF;EACE;;;;;AAQF;;;;;;;AAQA;;;;;;;;;;;;;;AAoBA;;;;;;;;AASA;;;;;;;;;;;AAeA;;;;;AAKA;;;;ACzKA;;;;;;;;AASA;;;;;;;AAOA;;;;;;AAMA;;;;AAIA;;;;AAIA;;;;;AAKA;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;AAKA;;;;;;;AAOA;;;;AAKA;;;;;AAMA;;;;;AAKA;;;;AAIA","sources":["src/css/variables.css","src/css/structure.css","src/css/typography.css","src/css/buttons.css","src/css/lists.css","src/css/player.css"],"sourcesContent":[":root {\r\n  /* Colors */\r\n  --primary-color: #0474ff;\r\n  --primary-color-dark: #002450;\r\n  --secondary-color: #181818;\r\n  --bg-color: #121212;\r\n  --text-color: #fff;\r\n  --border-color: #272727;\r\n  --grey-light: #9c9c9c;\r\n\r\n  /* Globals */\r\n  --border-radius: 10px;\r\n\r\n  /* Animations */\r\n  /*\r\n    on ne spécifie que la durée et la fonction de timing. Cela permet d'avoir des animations homogènes, mais de laisser\r\n    à l'élément le libre choix de l'/les attributs à animer. Voir fichiers CSS pour exemples\r\n  */\r\n  --default-transition: 300ms ease-in-out;\r\n}\r\n","/********************************************************************************/\r\n/* html body */\r\n\r\n/* Important, car par défaut, la hauteur est définie par la taille du contenu. Cela ne va donc pas jusqu'en bas\r\n   si pas assez de contenu */\r\nhtml, body {\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  /* body est un container flex en column */\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: var(--bg-color);\r\n}\r\n\r\n/********************************************************************************/\r\n/* header */\r\n\r\nheader {\r\n  /* header est un container flex en ligne, enfants pourssés de chaque coté */\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-shrink: 0; /* pas le droit de se réduire */\r\n\r\n  padding: 30px;\r\n  height: 60px;\r\n  /* un background dégradé... */\r\n  background: linear-gradient(0deg, var(--bg-color) 0%, var(--primary-color-dark) 150%); /* démarrer plus haut avec 150% */\r\n}\r\n\r\nheader #logo {\r\n  text-decoration: none;\r\n  font-size: 2rem;\r\n  text-shadow: 0 0 10px #000;\r\n}\r\n\r\nheader #logo.animated .material-icons {\r\n  /* on anime le logo s'il a la classe animated, avec les keyframes \"logo-scale\" définies plus bas */\r\n  /* l'idée sera d'ajouter cette classe quand une chanson est en cours de lecture */\r\n  animation-duration: 2s;\r\n  animation-name: logo-scale; /* voir plus bas */\r\n  animation-iteration-count: infinite;\r\n}\r\n\r\nheader #logo .material-icons {\r\n  font-size: 3rem;\r\n  vertical-align: middle;\r\n  color: var(--primary-color);\r\n}\r\n\r\nheader #search-wrapper {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  position: relative;\r\n}\r\n\r\nheader #search-wrapper #search-input {\r\n  /* on affiche le search input en absolute. Cela permet de passer par-dessus le logo sur les petits écrans */\r\n  position:  absolute;\r\n  right: 4rem;\r\n\r\n  height: 3rem;\r\n  width: 200px;\r\n  padding: 1rem;\r\n  border: 1px solid;\r\n  border-radius: var(--border-radius);\r\n  outline: none;\r\n  color: var(--secondary-color);\r\n\r\n  /* ici on utilise non pas display:none, mais visibility et opacity pour animer joliment l'apparition */\r\n  visibility: hidden;\r\n  opacity: 0;\r\n  transition: opacity var(--default-transition);\r\n}\r\n\r\nheader #search-wrapper #search-input.active { /* avec la classe \"active\", on affiche */\r\n  visibility: visible;\r\n  opacity: 1;\r\n}\r\n\r\nheader #search-wrapper #search-trigger .material-icons {\r\n  font-size: 3rem;\r\n  text-shadow: 0 0 10px #000;\r\n}\r\n\r\n/* animation pour le logo */\r\n/* https://developer.mozilla.org/fr/docs/Web/CSS/@keyframes */\r\n@keyframes logo-scale {\r\n  /* A un quart de l'animation, le logo sera agrandi d'1.15 fois sa taille */\r\n  25% {\r\n    transform: scale(1.15);\r\n  }\r\n\r\n  /* A trois quarts de l'animation, le logo sera réduit à 0.85 fois sa taille */\r\n  75% {\r\n    transform: scale(0.85);\r\n  }\r\n}\r\n\r\n/********************************************************************************/\r\n/* main */\r\n\r\nmain {\r\n  /* contrairement aux autres enfants (header, footer), prendre tout l'espace restant */\r\n  flex-grow: 1;\r\n\r\n  padding: 50px 30px;\r\n  overflow-y: auto; /* permet de scroller au sein du main et non sur toute la page */\r\n}\r\n\r\n/********************************************************************************/\r\n/* sections */\r\n\r\nmain section {\r\n  /* chaque section est un container flex en column */\r\n  flex-direction: column;\r\n\r\n  display: none;\r\n  margin: auto;\r\n  max-width: 1200px; /* max-width pour les gros écrans... éviter d'avoir une liste de 12'000px de large */\r\n}\r\n\r\nmain section.active { /* avec la classe \"active\", on affiche la section */\r\n  display: flex;\r\n}\r\n\r\n#player-section {\r\n  height: 100%;\r\n  padding: 0;\r\n  /* cas special, le player prend tout l'espace et centre son contenu. Les autres section partent du haut */\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n/********************************************************************************/\r\n/* footer */\r\n\r\nfooter {\r\n  flex-shrink: 0; /* pas le droit de se réduire */\r\n\r\n  height: 100px;\r\n  background: var(--secondary-color);\r\n  border-top: 1px solid var(--border-color);\r\n}\r\n\r\nfooter nav {\r\n  /* nav est de nouvau un container flex */\r\n  height: 100%;\r\n  display: flex;\r\n}\r\n\r\nfooter nav a {\r\n  /* chaque lien prend 1 part de l'espace restant, ils font donc tous la même taille */\r\n  flex-grow: 1;\r\n\r\n  /*\r\n    Pour center l'icône, on refait une flex box à un seul enfant (l'icône). Le lien est donc le parent flex et l'icône\r\n    son unique enfant à centrer. Milles autres façons de faire ça... mais insistons sur les flexboxes :)\r\n    Le centering vertical en CSS peut être parfois tricky...\r\n\r\n    Avis perso et complètement subjectif: les flexboxes servent à centrer un ou plusieurs éléments, verticalement\r\n    et horizontalement. Autant s'en servir, plutôt que de bricoler des top: 50%; avec des marges négatives, par exemple.\r\n    Il y a aussi l'option vertical-align, mais qui ne marchera que dans certains cas... (si le parent a une taille fixe)\r\n  */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n\r\n  text-align: center;\r\n  text-decoration: none;\r\n}\r\n\r\n/* tout ce qui est dans le lien du nav verra son changement de couleur animé  */\r\nfooter nav a * {\r\n  transition: color var(--default-transition);\r\n}\r\n\r\n/* affiché en bleu quand la souris passe dessus ou quand il y a la classe \"active\" */\r\nfooter nav a.active *,\r\nfooter nav a:hover * {\r\n  color: var(--primary-color);\r\n}\r\n\r\n/* taille de l'icône */\r\nfooter nav a .material-icons {\r\n  font-size: 2.5rem;\r\n}\r\n\r\n/* pour les petits écrans, on diminue la taille du footer et on cache le texte des icônes */\r\n@media (max-width: 768px) {\r\n  footer {\r\n    height: 80px;\r\n  }\r\n\r\n  footer nav a span:last-of-type {\r\n    display: none;\r\n  }\r\n}\r\n","/* On utilise Montserrat par défaut */\r\n* {\r\n  font-family: 'Montserrat', sans-serif;\r\n  font-size: 14px;\r\n  color: var(--text-color);\r\n}\r\n\r\nh1 {\r\n  font-size: 4rem;\r\n}\r\n\r\nh1.hero {\r\n  font-size: 4.5rem;\r\n  font-weight: 100;\r\n  text-align: center;\r\n}\r\n\r\n/* le hero est beaucoup trop grand en mobile. On réduit la taille de police pour qu'il passe dans le viewport */\r\n@media (max-width: 768px) {\r\n  h1.hero {\r\n    font-size: 3.5rem;\r\n  }\r\n}\r\n\r\nh2 {\r\n  font-size: 3.5rem;\r\n}\r\n\r\nh3 {\r\n  font-size: 3rem;\r\n}\r\n\r\nh4 {\r\n  font-size: 2.5rem;\r\n}\r\n\r\nh5 {\r\n  font-size: 2rem;\r\n}\r\n\r\nh6 {\r\n  font-size: 1.5rem;\r\n}\r\n\r\n/* on va centrer verticalement par défaut, au lieu d'aligner à la baseline */\r\n.material-icons {\r\n  vertical-align: middle;\r\n}\r\n","/********************************************************************************/\r\n/* buttons */\r\n\r\n/* pour utiliser un icône dans un bouton */\r\nbutton.icon-button {\r\n  margin: 0;\r\n  padding: 5px;\r\n  border: none;\r\n  background-color: transparent;\r\n  line-height: 0; /* trick pour éviter le padding de texte fantôme... */\r\n  cursor: pointer;\r\n}\r\n\r\nbutton.icon-button.align-right {\r\n  float: right;\r\n  line-height: 100%; /* trick pour l'alignement vertical... */\r\n}\r\n\r\nbutton.icon-button .material-icons {\r\n  /* la couleur de texte est animée */\r\n  transition: color var(--default-transition);\r\n}\r\n\r\nbutton.icon-button:hover .material-icons {\r\n  /* on change la couleur au survol */\r\n  color: var(--primary-color);\r\n}\r\n","/********************************************************************************/\r\n/* standard list */\r\n\r\n.list {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.list > * {\r\n  display: flex;\r\n  gap: 1rem;\r\n  align-items: center;\r\n\r\n  margin: 0;\r\n  padding: 0.75rem 1rem;\r\n  border-bottom: 1px solid var(--border-color);\r\n  transition: background-color var(--default-transition);\r\n}\r\n\r\n.list > *:hover {\r\n  background-color: var(--secondary-color);\r\n}\r\n\r\n.list > *:first-of-type {\r\n  /* on affiche un border top uniquement sur le premier élément */\r\n  border-top: 1px solid var(--border-color);\r\n}\r\n\r\n/* un lien est optionnellement supporté. Il doit donc prendre toute la place et devenir lui-même une flex box\r\n   pour agir comme le li de base */\r\n.list > * a {\r\n  /* toute la taille dispo du parent */\r\n  flex: 1;\r\n\r\n  /* devent une flex lui-même */\r\n  display: flex;\r\n\r\n  align-items: center;\r\n  text-decoration: none;\r\n}\r\n\r\n.list > * .list-item-title {\r\n  /* le titre prend toute la largeur dispo */\r\n  flex-grow: 1;\r\n}\r\n\r\n/********************************************************************************/\r\n/* button list */\r\n\r\n.button-list {\r\n  /* définition en tant que container flex */\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.button-list a {\r\n  /* Chaque lien se sépare la taille dispo\r\n  Taille setée à 25%, car max 4 par ligne\r\n  */\r\n  flex: 0 0 calc(25% - 3rem); /* à cause du padding ajouté plus bas... 2 * 1.5rem */\r\n  /*\r\n  NB: la propriété flex est un raccourci pour \"grow shrink basis\".\r\n  Exemple:\r\n  flex: grow shrink basis;\r\n  flex: 1 0 100px;\r\n  ====> équivalent à :\r\n  flex-grow: 1;\r\n  flex-shrink: 0;\r\n  flex-basis: 100px;\r\n\r\n  ou aussi :\r\n  flex: 1;\r\n  ====> équivalent à :\r\n  flex-grow: 1;\r\n  flex-shrink: valeur par défaut;\r\n  flex-basis: valeur par défaut;\r\n   */\r\n\r\n  padding: 1.5rem 1rem;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  font-weight: bold;\r\n  background-color: var(--secondary-color);\r\n  border: 1px solid var(--border-color);\r\n  border-radius: var(--border-radius);\r\n  transition: background-color var(--default-transition);\r\n\r\n  /* affichage d'un ellipsis */\r\n  white-space: nowrap; /* les espaces deviennent insécables  */\r\n  overflow: hidden; /* on cache ce qui dépasse */\r\n  text-overflow: ellipsis; /* on ajoute un ellipsis si ça dépasse */\r\n}\r\n\r\n.button-list a:hover {\r\n  background-color: var(--bg-color);\r\n}\r\n\r\n/* pour les mobiles 2 par ligne */\r\n@media (max-width: 768px) {\r\n  .button-list a {\r\n    flex-basis: calc(50% - 3rem);\r\n  }\r\n}\r\n\r\n/* pour les smartphones 3 par ligne */\r\n@media (min-width: 768px) and (max-width: 992px) {\r\n  .button-list a {\r\n    flex-basis: calc(33% - 3rem);\r\n  }\r\n}\r\n\r\n/********************************************************************************/\r\n/* artists list */\r\n\r\n.artist-list {\r\n  /* définition en tant que container flex */\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: flex-start;\r\n  gap: 1rem;\r\n}\r\n\r\n.artist-list > * {\r\n  /* position relative permet de définir cet élément comme le nouveau point de référence pour les éléments enfants\r\n  en absolute. Sans cette ligne, \"top: 0\" sur un enfant serait résolu par rapport au body - en haut à gauche de la page.\r\n  Avec cette ligne, \"top: 0\" sur un enfant sera résolu au point de départ du parent\r\n  */\r\n  display: block;\r\n  position: relative;\r\n  height: 150px;\r\n  width: 150px;\r\n  color: #000;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  font-weight: bold;\r\n\r\n  /* affichage d'un ellipsis */\r\n  white-space: nowrap; /* les espaces deviennent insécables  */\r\n  overflow: hidden; /* on cache ce qui dépasse */\r\n  text-overflow: ellipsis; /* on ajoute un ellipsis si ça dépasse */\r\n}\r\n\r\n.artist-list a .artist-list-item-title {\r\n  /* on affiche en absolute pour pouvoir superposer le titre et l'image */\r\n  position: absolute;\r\n  height: 100%;\r\n  width: 100%;\r\n  line-height: 150px;\r\n  text-shadow: 0 0 10px #000;\r\n}\r\n\r\n.artist-list a img {\r\n  /* on affiche en absolute pour pouvoir superposer le titre et l'image */\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100%;\r\n  width: 100%;\r\n  /* l'image va couvrir le parent et ne pas dépasser. A utiliser avec height/width 100%\r\n  Par défaut, cela va centrer l'image, possible de faire autrement avec object-position: axe-x axe-y */\r\n  object-fit: cover;\r\n\r\n  opacity: 0.4;\r\n  transition: all 0.5s ease-in-out;\r\n}\r\n\r\n.artist-list a:hover img {\r\n  opacity: 0.9;\r\n  transform: scale(1.1);\r\n}\r\n\r\n.artist-list:has(a:hover) a:not(:hover) img {\r\n  opacity: .1;\r\n}\r\n","/********************************************************************************/\r\n/* player */\r\n\r\n\r\n#player {\r\n  /* le player est un container flex */\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 2rem;\r\n  max-width: 400px; /* valeur arbitraire pour qu'il ne s'écarte pas trop */\r\n}\r\n\r\n#player #player-thumbnail {\r\n  align-self: center;\r\n  height: 200px;\r\n  width: 200px;\r\n  box-shadow: 0 0 15px #000;\r\n}\r\n\r\n#player #player-thumbnail img {\r\n  height: 100%;\r\n  width: 100%;\r\n  object-fit: cover; /* trick pour que l'image couvre toute la box. Voir lists.css ligne 162 */\r\n}\r\n\r\n#player #player-infos {\r\n  text-align: center;\r\n}\r\n\r\n#player #player-infos #player-infos-song * {\r\n  font-size: 1rem;\r\n}\r\n\r\n#player #player-infos #player-infos-artist * {\r\n  color: var(--grey-light);\r\n  font-size: 0.8rem;\r\n}\r\n\r\n#player #player-controls {\r\n  /* les contrôles sont dans un container flex */\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  width: 100%;\r\n}\r\n\r\n#player #player-controls .player-control {\r\n  margin: 0;\r\n  padding: 1.5rem;\r\n  background-color: var(--secondary-color);\r\n  border-radius: 50%;\r\n  border: 1px solid var(--border-color);\r\n  line-height: 0; /* trick pour éviter le padding de texte fantôme... */\r\n  cursor: pointer;\r\n  transition: box-shadow var(--default-transition);\r\n}\r\n\r\n#player #player-controls .player-control:hover {\r\n  /* une jolie ombre bleue au survol */\r\n  box-shadow: 0 0 10px var(--primary-color-dark);\r\n}\r\n\r\n#player #player-controls .player-control .material-icons {\r\n  font-size: 3rem;\r\n  line-height: 3rem;\r\n  color: #fff;\r\n  transition: color var(--default-transition);\r\n}\r\n\r\n#player #player-controls .player-control:hover .material-icons {\r\n  /* bleu au survol */\r\n  color: var(--primary-color);\r\n}\r\n\r\n#player #player-controls .player-control.player-control-small .material-icons {\r\n  font-size: 2rem;\r\n  line-height: 2rem;\r\n}\r\n\r\n\r\n#player #player-progress #player-progress-bar {\r\n  width: 100%;\r\n  transition: box-shadow var(--default-transition);\r\n}\r\n\r\n#player #player-progress #player-progress-bar:hover {\r\n  box-shadow: 0 0 15px var(--primary-color-dark);\r\n}\r\n\r\n#player #player-progress #player-times {\r\n  display: flex;\r\n  justify-content: space-between;\r\n}\r\n"],"names":[],"version":3,"file":"index.3092e1e0.css.map","sourceRoot":"/__parcel_source_root/"}